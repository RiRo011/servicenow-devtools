<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.GitLabAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Interface to the GitLab API.&#13;
Please note that this component is EXPERIMENTAL and UNSTABLE and the interface might be subject to change without an increase of DevTools major version!</description>
        <name>GitLabAPI</name>
        <script><![CDATA[var GitLabAPI = Class.create();
GitLabAPI.prototype = {
	
    initialize: function(strApiUrl, vAuthentication)
	{
		this.SetApiUrl(strApiUrl);
		this.m_basicauth = { username: '', password: ''};
    },
	
	SetCredential: function(strCredSysId)
	{
		var provider = new sn_cc.StandardCredentialsProvider();
		var credential = provider.getCredentialByID(strCredSysId);
		
		this.SetBasicAuth(
			credential.getAttribute("user_name"),
			credential.getAttribute("password"));
	},

	SetBasicAuth: function(strUsername, strPassword)
	{
		this.m_basicauth = {
			username: strUsername,
			password: strPassword
		};
	},
	
	SetApiUrl: function(strApiUrl)
	{
		strApiUrl = GetStringValue(strApiUrl);
		if (strApiUrl.endsWith('/'))
		{
			strApiUrl = strApiUrl+'/';
		}
		this.m_strApiUrl = strApiUrl;
	},

	GetApiUrl: function()
	{
		return this.m_strApiUrl;
	},
	
	Error: function(strMessage)
	{
		Log('GitLabAPI: ERROR: '+strMessage);
	},
	
	
	Request: function(strPath)
	{
		var strUrl = this.GetApiUrl()+strPath;
		var params = {
			url: strUrl,
			headers:
				[
					{
						name: 'PRIVATE-TOKEN',
						value: this.m_basicauth.password
					}
				]
		};
		
		var strResponse = HttpRequest(params);
		var response = ParseJson(strResponse);
		
		var strErrorMessage = GetStringValue(GetValue(response,'error'));
		if (strErrorMessage != '')
		{
			this.Error('GitLab API returned: "'+RenderValue(strErrorMessage)+'"');
			return false;
		}
		return response;
	},
	
	GetPublicProjects: function()
	{
		return this.Request('projects');
	},

	GetProjectPath: function(strProject)
	{
		strProject = GetStringValue(strProject);
		strProject = StringReplace(strProject,'/','%2F');
		return strProject;
	},
	
	GetTreePath: function(strTree)
	{
		strTree = GetStringValue(strTree);
		strTree = StringReplace(strTree,'/','%2F');
		return strTree;
	},	
		
	GetBranchesFromRepo: function(strProject)
	{
		strProject = this.GetProjectPath(strProject);
		return this.Request('projects/'+strProject+'/repository/branches');
	},

	GetFilesFromBranch: function(strProject, strBranch, strPath)
	{
		strProject = this.GetProjectPath(strProject);
		strBranch = GetStringValue(strBranch);
		strPath = this.GetTreePath(strPath);
		var aFiles = [];
		var response = this.Request('projects/'+strProject+'/repository/tree/'+strPath+'?ref='+strBranch+'&recursive=true');
		if (response == false)
		{
			this.Error('GetFilesFromBranch: no files found.');
			return false;
		}
		var aItems = GetArrayValue(response);
		for (var nItem = 0; nItem < aItems.length; nItem++)
		{
			var item = aItems[nItem];
			var strType = GetValue(item,'type');
			if (strType == 'blob')
			{
				aFiles.push(Clone(item));
			}
		}
		return aFiles;
	},

	
	GetFile: function(strProject, strBranch, strFilePath)
	{
		strProject = this.GetProjectPath(strProject);
		strBranch = GetStringValue(strBranch);
		strFilePath = this.GetTreePath(strFilePath);
		var response = this.Request('projects/'+strProject+'/repository/files/'+strFilePath+'?ref='+strBranch);
		if (response == false)
		{
			this.Error('GetFile: Request failed.');
			return false;
		}
		return response;
	},	


	
    type: 'GitLabAPI'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-03-15 20:14:10</sys_created_on>
        <sys_id>6732c8aadb69ed106a03dad1f39619fa</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>GitLabAPI</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_6732c8aadb69ed106a03dad1f39619fa</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-04-06 14:27:06</sys_updated_on>
    </sys_script_include>
</record_update>
